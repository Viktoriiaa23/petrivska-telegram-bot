# main.py
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, CallbackQueryHandler

TOKEN = '7996564047:AAFJzRYg8ICsUVzOe6oYOZt3v2EVG7UIC_Y'
ADMIN_CHAT_IDS = [424594836, 855759233]  # –ê–¥–º—ñ–Ω–∏

user_data = {}
dialog_history = {}

# –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ –∑ –≤–∏–±–æ—Ä–æ–º —Ç–µ–º–∏

def start(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("üì£ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ù–û–í–ò–ù–£", callback_data='news')],
        [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')],
        [InlineKeyboardButton("üí¨ –Ü–Ω—à–µ", callback_data='general')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("üëã –í—ñ—Ç–∞—î–º–æ –≤ –±–æ—Ç—ñ –ü–ï–¢–†–Ü–í–°–¨–ö–û–á –ì–†–û–ú–ê–î–ò", reply_markup=reply_markup)

# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ —Ç–µ–º–∏

def button(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    user_id = query.from_user.id
    user_data[user_id] = {'topic': query.data}
    context.bot.send_message(chat_id=user_id, text=f"‚úèÔ∏è –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—î –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø–æ —Ç–µ–º—ñ: {query.data}")

# –ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –∑–≤–µ—Ä–Ω–µ–Ω—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º

def forward_message(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id not in user_data:
        update.message.reply_text("‚ùó –°–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start —Ç–∞ –≤–∏–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è.")
        return

    topic = user_data[user_id]['topic']
    message_text = update.message.text or "[–ú–µ–¥—ñ–∞]"

    if user_id not in dialog_history:
        dialog_history[user_id] = []
    dialog_history[user_id].append((topic, message_text))

    for admin_id in ADMIN_CHAT_IDS:
        if update.message.text:
            fwd = update.message.forward(chat_id=admin_id)
        else:
            fwd = context.bot.forward_message(chat_id=admin_id, from_chat_id=user_id, message_id=update.message.message_id)

        username = update.message.from_user.username or update.message.from_user.first_name or str(user_id)
        reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("üí¨ –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f"reply_{user_id}")]])

        context.bot.send_message(
            chat_id=admin_id,
            text=f"üí¨ –ó–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤—ñ–¥ @{username}\n–¢–µ–º–∞: {topic}",
            reply_to_message_id=fwd.message_id,
            reply_markup=reply_markup
        )

    update.message.reply_text("‚úÖ –í–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.")

# –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞

def handle_reply(update: Update, context: CallbackContext):
    if update.message.reply_to_message:
        for line in update.message.reply_to_message.text.split("\n"):
            if line.startswith("üí¨ –ó–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤—ñ–¥"):
                try:
                    user_line = line.split("@")[1].strip()
                    for user_id in user_data:
                        chat = context.bot.get_chat(user_id)
                        if user_line.lower() in [
                            (chat.username or '').lower(),
                            (chat.first_name or '').lower()
                        ]:
                            context.bot.send_message(chat_id=user_id, text=f"üì© –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {update.message.text}")
                            return
                except Exception:
                    continue
    update.message.reply_text("‚ùó –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.")

# –ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞

def admin(update: Update, context: CallbackContext):
    if update.message.chat_id in ADMIN_CHAT_IDS:
        update.message.reply_text("üîê –ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: /last")

# –ü–µ—Ä–µ–≥–ª—è–¥ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∑–≤–µ—Ä–Ω–µ–Ω—å

def last(update: Update, context: CallbackContext):
    if update.message.chat_id in ADMIN_CHAT_IDS:
        text = "üóÇÔ∏è –û—Å—Ç–∞–Ω–Ω—ñ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è:\n"
        for uid, msgs in dialog_history.items():
            latest = msgs[-1][1]
            topic = msgs[-1][0]
            short_text = latest[:30] + "..." if len(latest) > 30 else latest
            text += f"üë§ ID: {uid}, {topic} ‚Äî {short_text}\n"
        update.message.reply_text(text or "–ù–µ–º–∞—î –∑–≤–µ—Ä–Ω–µ–Ω—å.")

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É

def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("admin", admin))
    dp.add_handler(CommandHandler("last", last))
    dp.add_handler(CallbackQueryHandler(button))
    dp.add_handler(MessageHandler(Filters.reply & Filters.text, handle_reply))
    dp.add_handler(MessageHandler(Filters.text | Filters.photo | Filters.video | Filters.document | Filters.voice, forward_message))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
